{"ast":null,"code":"import _objectSpread from \"/home/harry/Desktop/Insiten-code/company/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { GET_ALL_COMPANY, GET_COMPANY, ADD_COMPANY, UPDATE_COMPANY, DELETE_COMPANY, COMPANY_ERROR, SET_LOADING, SET_CURRENT, CLEAR_CURRENT, SEARCH_COMPANY, TARGET_REVENUE, SET_SEARCH, CLEAR_SEARCH, LARGE_TO_SMALL_SORT, SMALL_TO_LARGE_SORT } from \"../actions/types\";\nconst initialState = {\n  companies: [],\n  company: null,\n  sortedCompanies: [],\n  current: null,\n  loading: false,\n  search: false,\n  error: null\n};\n\nconst closestCompany = (companies, target) => {\n  var closestCompany = companies; // Below lines are similar to insertion sort\n\n  for (var i = 1; i < closestCompany.length; i++) {\n    var diff = Math.abs(closestCompany[i].Revenue - target); // Insert closestCompany[i] at correct place\n\n    var j = i - 1;\n\n    if (Math.abs(closestCompany[j].Revenue - target) > diff) {\n      var temp = closestCompany[i];\n\n      while (j >= 0 && Math.abs(closestCompany[j].Revenue - target) > diff) {\n        closestCompany[j + 1] = closestCompany[j];\n        j--;\n      }\n\n      closestCompany[j + 1] = temp;\n    }\n  }\n\n  return closestCompany;\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_ALL_COMPANY:\n      return _objectSpread({}, state, {\n        companies: action.payload\n      });\n\n    case GET_COMPANY:\n      return _objectSpread({}, state, {\n        company: action.payload\n      });\n\n    case ADD_COMPANY:\n      return _objectSpread({}, state, {\n        companies: [...state.companies, action.payload],\n        loading: false\n      });\n\n    case UPDATE_COMPANY:\n      return _objectSpread({}, state, {\n        companies: state.companies.map(company => company.id === action.payload.id ? action.payload : company),\n        loading: false\n      });\n\n    case DELETE_COMPANY:\n      return _objectSpread({}, state, {\n        companies: state.companies.filter(company => company.id !== action.payload),\n        loading: false\n      });\n\n    case SEARCH_COMPANY:\n      return _objectSpread({}, state, {\n        companies: action.payload\n      });\n\n    case SET_SEARCH:\n      return _objectSpread({}, state, {\n        search: true\n      });\n\n    case CLEAR_SEARCH:\n      return _objectSpread({}, state, {\n        search: false\n      });\n\n    case TARGET_REVENUE:\n      return _objectSpread({}, state, {\n        sortedCompanies: closestCompany([...state.companies], action.payload)\n      });\n\n    case SET_CURRENT:\n      return _objectSpread({}, state, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread({}, state, {\n        current: null\n      });\n\n    case COMPANY_ERROR:\n      console.error(action.payload);\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    case LARGE_TO_SMALL_SORT:\n      return _objectSpread({}, state, {\n        companies: state.companies.sort((a, b) => {\n          if (a.Revenue > b.Revenue) return 1;\n          if (a.Revenue < b.Revenue) return -1;\n          return 0;\n        })\n      });\n\n    case SMALL_TO_LARGE_SORT:\n      return _objectSpread({}, state, {\n        companies: state.companies.sort((a, b) => {\n          if (a.Revenue > b.Revenue) return -1;\n          if (a.Revenue < b.Revenue) return 1;\n          return 0;\n        })\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/harry/Desktop/Insiten-code/company/src/reducers/companyReducer.js"],"names":["GET_ALL_COMPANY","GET_COMPANY","ADD_COMPANY","UPDATE_COMPANY","DELETE_COMPANY","COMPANY_ERROR","SET_LOADING","SET_CURRENT","CLEAR_CURRENT","SEARCH_COMPANY","TARGET_REVENUE","SET_SEARCH","CLEAR_SEARCH","LARGE_TO_SMALL_SORT","SMALL_TO_LARGE_SORT","initialState","companies","company","sortedCompanies","current","loading","search","error","closestCompany","target","i","length","diff","Math","abs","Revenue","j","temp","state","action","type","payload","map","id","filter","console","sort","a","b"],"mappings":"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","sourcesContent":["import {\n  GET_ALL_COMPANY,\n  GET_COMPANY,\n  ADD_COMPANY,\n  UPDATE_COMPANY,\n  DELETE_COMPANY,\n  COMPANY_ERROR,\n  SET_LOADING,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  SEARCH_COMPANY,\n  TARGET_REVENUE,\n  SET_SEARCH,\n  CLEAR_SEARCH,\n  LARGE_TO_SMALL_SORT,\n  SMALL_TO_LARGE_SORT,\n} from \"../actions/types\";\n\nconst initialState = {\n  companies: [],\n  company: null,\n  sortedCompanies: [],\n  current: null,\n  loading: false,\n  search: false,\n  error: null,\n};\n\nconst closestCompany = (companies, target) => {\n  var closestCompany = companies;\n  // Below lines are similar to insertion sort\n  for (var i = 1; i < closestCompany.length; i++) {\n    var diff = Math.abs(closestCompany[i].Revenue - target);\n\n    // Insert closestCompany[i] at correct place\n    var j = i - 1;\n    if (Math.abs(closestCompany[j].Revenue - target) > diff) {\n      var temp = closestCompany[i];\n      while (j >= 0 && Math.abs(closestCompany[j].Revenue - target) > diff) {\n        closestCompany[j + 1] = closestCompany[j];\n        j--;\n      }\n      closestCompany[j + 1] = temp;\n    }\n  }\n  return closestCompany;\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_ALL_COMPANY:\n      return {\n        ...state,\n        companies: action.payload,\n      };\n    case GET_COMPANY:\n      return {\n        ...state,\n        company: action.payload,\n      };\n    case ADD_COMPANY:\n      return {\n        ...state,\n        companies: [...state.companies, action.payload],\n        loading: false,\n      };\n    case UPDATE_COMPANY:\n      return {\n        ...state,\n        companies: state.companies.map(company =>\n          company.id === action.payload.id ? action.payload : company,\n        ),\n        loading: false,\n      };\n    case DELETE_COMPANY:\n      return {\n        ...state,\n        companies: state.companies.filter(\n          company => company.id !== action.payload,\n        ),\n        loading: false,\n      };\n    case SEARCH_COMPANY:\n      return {\n        ...state,\n        companies: action.payload,\n      };\n    case SET_SEARCH:\n      return {\n        ...state,\n        search: true,\n      };\n    case CLEAR_SEARCH:\n      return {\n        ...state,\n        search: false,\n      };\n    case TARGET_REVENUE:\n      return {\n        ...state,\n        sortedCompanies: closestCompany([...state.companies], action.payload),\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n      };\n    case COMPANY_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case LARGE_TO_SMALL_SORT:\n      return {\n        ...state,\n        companies: state.companies.sort((a, b) => {\n          if (a.Revenue > b.Revenue) return 1;\n          if (a.Revenue < b.Revenue) return -1;\n          return 0;\n        }),\n      };\n    case SMALL_TO_LARGE_SORT:\n      return {\n        ...state,\n        companies: state.companies.sort((a, b) => {\n          if (a.Revenue > b.Revenue) return -1;\n          if (a.Revenue < b.Revenue) return 1;\n          return 0;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}