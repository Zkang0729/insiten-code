{"ast":null,"code":"import _objectSpread from \"/home/harry/Desktop/Insiten-code/company/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { GET_ALL_COMPANY, GET_COMPANY, ADD_COMPANY, UPDATE_COMPANY, DELETE_COMPANY, COMPANY_ERROR, SET_LOADING, SET_CURRENT, CLEAR_CURRENT, SEARCH_COMPANY } from \"../actions/types\";\nconst initialState = {\n  companies: null,\n  company: null,\n  target: 0,\n  current: null,\n  loading: false,\n  error: null\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_ALL_COMPANY:\n      return _objectSpread({}, state, {\n        companies: action.payload\n      });\n\n    case GET_COMPANY:\n      return _objectSpread({}, state, {\n        company: action.payload\n      });\n\n    case ADD_COMPANY:\n      return _objectSpread({}, state, {\n        companies: [...state.companies, action.payload],\n        loading: false\n      });\n\n    case UPDATE_COMPANY:\n      return _objectSpread({}, state, {\n        companies: state.companies.map(company => company.id === action.payload.id ? action.payload : company),\n        loading: false\n      });\n\n    case DELETE_COMPANY:\n      return _objectSpread({}, state, {\n        companies: state.companies.filter(company => company.id !== action.payload),\n        loading: false\n      });\n\n    case SEARCH_COMPANY:\n      return _objectSpread({}, state, {\n        companies: action.payload\n      });\n\n    case SET_CURRENT:\n      return _objectSpread({}, state, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread({}, state, {\n        current: null\n      });\n\n    case COMPANY_ERROR:\n      console.error(action.payload);\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/harry/Desktop/Insiten-code/company/src/reducers/companyReducer.js"],"names":["GET_ALL_COMPANY","GET_COMPANY","ADD_COMPANY","UPDATE_COMPANY","DELETE_COMPANY","COMPANY_ERROR","SET_LOADING","SET_CURRENT","CLEAR_CURRENT","SEARCH_COMPANY","initialState","companies","company","target","current","loading","error","state","action","type","payload","map","id","filter","console"],"mappings":";AAAA,SACEA,eADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,aANF,EAOEC,WAPF,EAQEC,WARF,EASEC,aATF,EAUEC,cAVF,QAWO,kBAXP;AAaA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,IADQ;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,MAAM,EAAE,CAHW;AAInBC,EAAAA,OAAO,EAAE,IAJU;AAKnBC,EAAAA,OAAO,EAAE,KALU;AAMnBC,EAAAA,KAAK,EAAE;AANY,CAArB;AASA,gBAAe,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,WAAL;AACE,+BACKW,KADL;AAEEF,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKf,eAAL;AACE,+BACKiB,KADL;AAEEN,QAAAA,SAAS,EAAEO,MAAM,CAACE;AAFpB;;AAIF,SAAKnB,WAAL;AACE,+BACKgB,KADL;AAEEL,QAAAA,OAAO,EAAEM,MAAM,CAACE;AAFlB;;AAIF,SAAKlB,WAAL;AACE,+BACKe,KADL;AAEEN,QAAAA,SAAS,EAAE,CAAC,GAAGM,KAAK,CAACN,SAAV,EAAqBO,MAAM,CAACE,OAA5B,CAFb;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKZ,cAAL;AACE,+BACKc,KADL;AAEEN,QAAAA,SAAS,EAAEM,KAAK,CAACN,SAAN,CAAgBU,GAAhB,CAAoBT,OAAO,IACpCA,OAAO,CAACU,EAAR,KAAeJ,MAAM,CAACE,OAAP,CAAeE,EAA9B,GAAmCJ,MAAM,CAACE,OAA1C,GAAoDR,OAD3C,CAFb;AAKEG,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKX,cAAL;AACE,+BACKa,KADL;AAEEN,QAAAA,SAAS,EAAEM,KAAK,CAACN,SAAN,CAAgBY,MAAhB,CACTX,OAAO,IAAIA,OAAO,CAACU,EAAR,KAAeJ,MAAM,CAACE,OADxB,CAFb;AAKEL,QAAAA,OAAO,EAAE;AALX;;AAOF,SAAKN,cAAL;AACE,+BACKQ,KADL;AAEEN,QAAAA,SAAS,EAAEO,MAAM,CAACE;AAFpB;;AAIF,SAAKb,WAAL;AACE,+BACKU,KADL;AAEEH,QAAAA,OAAO,EAAEI,MAAM,CAACE;AAFlB;;AAIF,SAAKZ,aAAL;AACE,+BACKS,KADL;AAEEH,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKT,aAAL;AACEmB,MAAAA,OAAO,CAACR,KAAR,CAAcE,MAAM,CAACE,OAArB;AACA,+BACKH,KADL;AAEED,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFhB;;AAIF;AACE,aAAOH,KAAP;AA5DJ;AA8DD,CA/DD","sourcesContent":["import {\n  GET_ALL_COMPANY,\n  GET_COMPANY,\n  ADD_COMPANY,\n  UPDATE_COMPANY,\n  DELETE_COMPANY,\n  COMPANY_ERROR,\n  SET_LOADING,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  SEARCH_COMPANY,\n} from \"../actions/types\";\n\nconst initialState = {\n  companies: null,\n  company: null,\n  target: 0,\n  current: null,\n  loading: false,\n  error: null,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_ALL_COMPANY:\n      return {\n        ...state,\n        companies: action.payload,\n      };\n    case GET_COMPANY:\n      return {\n        ...state,\n        company: action.payload,\n      };\n    case ADD_COMPANY:\n      return {\n        ...state,\n        companies: [...state.companies, action.payload],\n        loading: false,\n      };\n    case UPDATE_COMPANY:\n      return {\n        ...state,\n        companies: state.companies.map(company =>\n          company.id === action.payload.id ? action.payload : company,\n        ),\n        loading: false,\n      };\n    case DELETE_COMPANY:\n      return {\n        ...state,\n        companies: state.companies.filter(\n          company => company.id !== action.payload,\n        ),\n        loading: false,\n      };\n    case SEARCH_COMPANY:\n      return {\n        ...state,\n        companies: action.payload,\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n      };\n    case COMPANY_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}