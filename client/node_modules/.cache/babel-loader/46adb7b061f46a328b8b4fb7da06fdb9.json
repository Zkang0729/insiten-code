{"ast":null,"code":"import _objectSpread from \"/home/harry/Desktop/Insiten-code/company/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { GET_ALL_COMPANY, GET_COMPANY, ADD_COMPANY, UPDATE_COMPANY, DELETE_COMPANY, COMPANY_ERROR, SET_LOADING, SET_CURRENT, CLEAR_CURRENT, SEARCH_COMPANY, TARGET_REVENUE, SET_SEARCH, CLEAR_SEARCH } from \"../actions/types\";\nconst initialState = {\n  companies: [],\n  company: [],\n  current: null,\n  loading: false,\n  search: false,\n  error: null\n};\n\nconst closestCompany = (companies, target) => {\n  var closestCompany = companies; // Below lines are similar to insertion sort \n\n  for (var i = 1; i < closestCompany.length; i++) {\n    var diff = Math.abs(closestCompany[i] - target); // Insert closestCompany[i] at correct place \n\n    var j = i - 1;\n\n    if (Math.abs(closestCompany[j] - target) > diff) {\n      var temp = closestCompany[i];\n\n      while (j >= 0 && Math.abs(closestCompany[j] - target) > diff) {\n        closestCompany[j + 1] = closestCompany[j];\n        j--;\n      }\n\n      closestCompany[j + 1] = temp;\n    }\n  }\n\n  return closestCompany;\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_ALL_COMPANY:\n      return _objectSpread({}, state, {\n        companies: action.payload\n      });\n\n    case GET_COMPANY:\n      return _objectSpread({}, state, {\n        company: action.payload\n      });\n\n    case ADD_COMPANY:\n      return _objectSpread({}, state, {\n        companies: [...state.companies, action.payload],\n        loading: false\n      });\n\n    case UPDATE_COMPANY:\n      return _objectSpread({}, state, {\n        companies: state.companies.map(company => company.id === action.payload.id ? action.payload : company),\n        loading: false\n      });\n\n    case DELETE_COMPANY:\n      return _objectSpread({}, state, {\n        companies: state.companies.filter(company => company.id !== action.payload),\n        loading: false\n      });\n\n    case SEARCH_COMPANY:\n      return _objectSpread({}, state, {\n        companies: action.payload\n      });\n\n    case SET_SEARCH:\n      return _objectSpread({}, state, {\n        search: true\n      });\n\n    case CLEAR_SEARCH:\n      return _objectSpread({}, state, {\n        search: false\n      });\n\n    case TARGET_REVENUE:\n      return _objectSpread({}, state, {\n        company: closestCompany([...state.companies], action.payload)\n      });\n\n    case SET_CURRENT:\n      return _objectSpread({}, state, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread({}, state, {\n        current: null\n      });\n\n    case COMPANY_ERROR:\n      console.error(action.payload);\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/harry/Desktop/Insiten-code/company/src/reducers/companyReducer.js"],"names":["GET_ALL_COMPANY","GET_COMPANY","ADD_COMPANY","UPDATE_COMPANY","DELETE_COMPANY","COMPANY_ERROR","SET_LOADING","SET_CURRENT","CLEAR_CURRENT","SEARCH_COMPANY","TARGET_REVENUE","SET_SEARCH","CLEAR_SEARCH","initialState","companies","company","current","loading","search","error","closestCompany","target","i","length","diff","Math","abs","j","temp","state","action","type","payload","map","id","filter","console"],"mappings":"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","sourcesContent":["import {\n  GET_ALL_COMPANY,\n  GET_COMPANY,\n  ADD_COMPANY,\n  UPDATE_COMPANY,\n  DELETE_COMPANY,\n  COMPANY_ERROR,\n  SET_LOADING,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  SEARCH_COMPANY,\n  TARGET_REVENUE,\n  SET_SEARCH,\n  CLEAR_SEARCH,\n} from \"../actions/types\";\n\nconst initialState = {\n  companies: [],\n  company: [],\n  current: null,\n  loading: false,\n  search: false,\n  error: null,\n};\n\nconst closestCompany = (companies, target) => {\n  var closestCompany = companies;\n  // Below lines are similar to insertion sort \n  for (var i = 1; i < closestCompany.length; i++) { \n    var diff = Math.abs(closestCompany[i] - target); \n\n    // Insert closestCompany[i] at correct place \n    var j = i - 1; \n    if (Math.abs(closestCompany[j] - target) > diff) \n    { \n        var temp = closestCompany[i]; \n        while (j >= 0 && Math.abs(closestCompany[j] - target) > diff)  \n        { \n            closestCompany[j + 1] = closestCompany[j]; \n            j--; \n        } \n        closestCompany[j + 1] = temp; \n    } \n} \n  return closestCompany;\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_ALL_COMPANY:\n      return {\n        ...state,\n        companies: action.payload,\n      };\n    case GET_COMPANY:\n      return {\n        ...state,\n        company: action.payload,\n      };\n    case ADD_COMPANY:\n      return {\n        ...state,\n        companies: [...state.companies, action.payload],\n        loading: false,\n      };\n    case UPDATE_COMPANY:\n      return {\n        ...state,\n        companies: state.companies.map(company =>\n          company.id === action.payload.id ? action.payload : company,\n        ),\n        loading: false,\n      };\n    case DELETE_COMPANY:\n      return {\n        ...state,\n        companies: state.companies.filter(\n          company => company.id !== action.payload,\n        ),\n        loading: false,\n      };\n    case SEARCH_COMPANY:\n      return {\n        ...state,\n        companies: action.payload,\n      };\n    case SET_SEARCH:\n      return {\n        ...state,\n        search: true,\n      };\n    case CLEAR_SEARCH:\n      return {\n        ...state,\n        search: false,\n      };\n    case TARGET_REVENUE:\n      return {\n        ...state,\n        company: closestCompany([...state.companies], action.payload),\n      };\n\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n      };\n    case COMPANY_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}