{"ast":null,"code":"import { GET_ALL_COMPANY, GET_COMPANY, ADD_COMPANY, UPDATE_COMPANY, DELETE_COMPANY, COMPANY_ERROR, SET_LOADING, SET_CURRENT, CLEAR_CURRENT, SEARCH_COMPANY, TARGET_REVENUE, SET_SEARCH, CLEAR_SEARCH, LARGE_TO_SMALL_SORT, SMALL_TO_LARGE_SORT } from \"../actions/types\"; // Get all companies from server\n\nexport const getAllCompany = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${process.env.PORT}/companies`);\n    const data = await res.json();\n    dispatch({\n      type: GET_ALL_COMPANY,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Get a specific company from server\n\nexport const getCompany = id => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/companies/${id}`);\n    const data = await res.json();\n    dispatch({\n      type: GET_COMPANY,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Add new company\n\nexport const addCompany = company => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/companies\", {\n      method: \"POST\",\n      body: JSON.stringify(company),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_COMPANY,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Delete company from server\n\nexport const deleteCompany = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/companies/${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: DELETE_COMPANY,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Update company on server\n\nexport const updateCompany = company => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/companies/${company.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(company),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_COMPANY,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Search server companies\n\nexport const searchCompanies = text => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/companies?q=${text}`);\n    const data = await res.json();\n    dispatch({\n      type: SEARCH_COMPANY,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Search for target revenue company\n\nexport const targetRevenue = target => {\n  setLoading();\n  return {\n    type: TARGET_REVENUE,\n    payload: target\n  };\n}; // Set search to true\n\nexport const setSearch = () => {\n  return {\n    type: SET_SEARCH\n  };\n}; // Set search to false\n\nexport const clearSearch = () => {\n  return {\n    type: CLEAR_SEARCH\n  };\n}; //Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n}; // Set current company\n\nexport const setCurrent = company => {\n  return {\n    type: SET_CURRENT,\n    payload: company\n  };\n}; // Clear current company\n\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT\n  };\n}; // Large to small sort\n\nexport const ltsSort = () => {\n  return {\n    type: LARGE_TO_SMALL_SORT\n  };\n}; // Small to large sort\n\nexport const stlSort = () => {\n  return {\n    type: SMALL_TO_LARGE_SORT\n  };\n};","map":{"version":3,"sources":["/home/harry/Desktop/Insiten-code/company/src/actions/companyActions.js"],"names":["GET_ALL_COMPANY","GET_COMPANY","ADD_COMPANY","UPDATE_COMPANY","DELETE_COMPANY","COMPANY_ERROR","SET_LOADING","SET_CURRENT","CLEAR_CURRENT","SEARCH_COMPANY","TARGET_REVENUE","SET_SEARCH","CLEAR_SEARCH","LARGE_TO_SMALL_SORT","SMALL_TO_LARGE_SORT","getAllCompany","dispatch","setLoading","res","fetch","process","env","PORT","data","json","type","payload","err","response","statusText","getCompany","id","addCompany","company","method","body","JSON","stringify","headers","deleteCompany","updateCompany","searchCompanies","text","targetRevenue","target","setSearch","clearSearch","setCurrent","clearCurrent","ltsSort","stlSort"],"mappings":"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","sourcesContent":["import {\n  GET_ALL_COMPANY,\n  GET_COMPANY,\n  ADD_COMPANY,\n  UPDATE_COMPANY,\n  DELETE_COMPANY,\n  COMPANY_ERROR,\n  SET_LOADING,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  SEARCH_COMPANY,\n  TARGET_REVENUE,\n  SET_SEARCH,\n  CLEAR_SEARCH,\n  LARGE_TO_SMALL_SORT,\n  SMALL_TO_LARGE_SORT,\n} from \"../actions/types\";\n\n// Get all companies from server\nexport const getAllCompany = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`${process.env.PORT}/companies`);\n    const data = await res.json();\n    dispatch({\n      type: GET_ALL_COMPANY,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Get a specific company from server\nexport const getCompany = id => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/companies/${id}`);\n    const data = await res.json();\n    dispatch({\n      type: GET_COMPANY,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n//Add new company\nexport const addCompany = company => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/companies\", {\n      method: \"POST\",\n      body: JSON.stringify(company),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_COMPANY,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n//Delete company from server\nexport const deleteCompany = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/companies/${id}`, {\n      method: \"DELETE\",\n    });\n    dispatch({\n      type: DELETE_COMPANY,\n      payload: id,\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n//Update company on server\nexport const updateCompany = company => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/companies/${company.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(company),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await res.json();\n    dispatch({\n      type: UPDATE_COMPANY,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Search server companies\nexport const searchCompanies = text => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(`/companies?q=${text}`);\n    const data = await res.json();\n    dispatch({\n      type: SEARCH_COMPANY,\n      payload: data,\n    });\n  } catch (err) {\n    dispatch({\n      type: COMPANY_ERROR,\n      payload: err.response.statusText,\n    });\n  }\n};\n\n// Search for target revenue company\nexport const targetRevenue = target => {\n  setLoading();\n  return {\n    type: TARGET_REVENUE,\n    payload: target,\n  };\n};\n\n// Set search to true\nexport const setSearch = () => {\n  return {\n    type: SET_SEARCH,\n  };\n};\n\n// Set search to false\nexport const clearSearch = () => {\n  return {\n    type: CLEAR_SEARCH,\n  };\n};\n\n//Set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING,\n  };\n};\n\n// Set current company\nexport const setCurrent = company => {\n  return {\n    type: SET_CURRENT,\n    payload: company,\n  };\n};\n\n// Clear current company\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT,\n  };\n};\n\n// Large to small sort\nexport const ltsSort = () => {\n  return {\n    type: LARGE_TO_SMALL_SORT,\n  };\n};\n\n// Small to large sort\nexport const stlSort = () => {\n  return {\n    type: SMALL_TO_LARGE_SORT,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}